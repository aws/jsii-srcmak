// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`csharp + different entrypoint 1`] = `
Object {
  "Hello.World/AssemblyInfo.cs": "using Amazon.JSII.Runtime.Deputy;

[assembly: JsiiAssembly(\\"csharppackage\\", \\"0.0.0\\", \\"csharppackage-0.0.0.tgz\\")]
",
  "Hello.World/Hello.World.csproj": "<Project Sdk=\\"Microsoft.NET.Sdk\\">
  <PropertyGroup>
    <!-- Package Identification -->
    <Description>csharppackage</Description>
    <PackageId>Hello.World</PackageId>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PackageVersion>0.0.0</PackageVersion>
    <!-- Additional Metadata -->
    <Authors>generated@generated.com</Authors>
    <Language>en-US</Language>
    <ProjectUrl>http://generated</ProjectUrl>
    <RepositoryUrl>http://generated</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <!-- Build Configuration -->
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSource>true</IncludeSource>
    <Nullable>enable</Nullable>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <TargetFramework>netcoreapp3.1</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <EmbeddedResource Include=\\"csharppackage-0.0.0.tgz\\" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include=\\"Amazon.JSII.Runtime\\" Version=\\"[1.28.0,2.0.0)\\" />
  </ItemGroup>
  <PropertyGroup>
    <!-- Silence [Obsolete] warnings -->
    <NoWarn>0612,0618</NoWarn>
    <!-- Treat warnings symptomatic of code generation bugs as errors -->
    <WarningsAsErrors>0108,0109</WarningsAsErrors>
  </PropertyGroup>
</Project>

",
  "Hello.World/Hello/World/Hello.cs": "using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Hello.World
{
    [JsiiClass(nativeType: typeof(Hello.World.Hello), fullyQualifiedName: \\"csharppackage.Hello\\")]
    public class Hello : DeputyBase
    {
        public Hello(): base(new DeputyProps(System.Array.Empty<object?>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name=\\"reference\\">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Hello(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name=\\"props\\">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Hello(DeputyProps props): base(props)
        {
        }

        [JsiiMethod(name: \\"add\\", returnsJson: \\"{\\\\\\"type\\\\\\":{\\\\\\"primitive\\\\\\":\\\\\\"number\\\\\\"}}\\", parametersJson: \\"[{\\\\\\"name\\\\\\":\\\\\\"ops\\\\\\",\\\\\\"type\\\\\\":{\\\\\\"fqn\\\\\\":\\\\\\"csharppackage.Operands\\\\\\"}}]\\")]
        public virtual double Add(Hello.World.IOperands ops)
        {
            return InvokeInstanceMethod<double>(new System.Type[]{typeof(Hello.World.IOperands)}, new object[]{ops})!;
        }
    }
}
",
  "Hello.World/Hello/World/IOperands.cs": "using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Hello.World
{
    [JsiiInterface(nativeType: typeof(IOperands), fullyQualifiedName: \\"csharppackage.Operands\\")]
    public interface IOperands
    {
        [JsiiProperty(name: \\"lhs\\", typeJson: \\"{\\\\\\"primitive\\\\\\":\\\\\\"number\\\\\\"}\\")]
        double Lhs
        {
            get;
        }

        [JsiiProperty(name: \\"rhs\\", typeJson: \\"{\\\\\\"primitive\\\\\\":\\\\\\"number\\\\\\"}\\")]
        double Rhs
        {
            get;
        }

        [JsiiTypeProxy(nativeType: typeof(IOperands), fullyQualifiedName: \\"csharppackage.Operands\\")]
        internal sealed class _Proxy : DeputyBase, Hello.World.IOperands
        {
            private _Proxy(ByRefValue reference): base(reference)
            {
            }

            [JsiiProperty(name: \\"lhs\\", typeJson: \\"{\\\\\\"primitive\\\\\\":\\\\\\"number\\\\\\"}\\")]
            public double Lhs
            {
                get => GetInstanceProperty<double>()!;
            }

            [JsiiProperty(name: \\"rhs\\", typeJson: \\"{\\\\\\"primitive\\\\\\":\\\\\\"number\\\\\\"}\\")]
            public double Rhs
            {
                get => GetInstanceProperty<double>()!;
            }
        }
    }
}
",
  "Hello.World/Hello/World/Internal/DependencyResolution/Anchor.cs": "#pragma warning disable CS0672,CS0809,CS1591

namespace Hello.World.Internal.DependencyResolution
{
    public sealed class Anchor
    {
        public Anchor()
        {
        }
    }
}
",
  "Hello.World/Hello/World/Operands.cs": "using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Hello.World
{
    #pragma warning disable CS8618

    [JsiiByValue(fqn: \\"csharppackage.Operands\\")]
    public class Operands : Hello.World.IOperands
    {
        [JsiiProperty(name: \\"lhs\\", typeJson: \\"{\\\\\\"primitive\\\\\\":\\\\\\"number\\\\\\"}\\", isOverride: true)]
        public double Lhs
        {
            get;
            set;
        }

        [JsiiProperty(name: \\"rhs\\", typeJson: \\"{\\\\\\"primitive\\\\\\":\\\\\\"number\\\\\\"}\\", isOverride: true)]
        public double Rhs
        {
            get;
            set;
        }
    }
}
",
  "Hello.World/LICENSE": "Apache License
Version 2.0, January 2004
http://www.apache.org/licenses/

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1. Definitions.

\\"License\\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.

\\"Licensor\\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.

\\"Legal Entity\\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \\"control\\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.

\\"You\\" (or \\"Your\\") shall mean an individual or Legal Entity exercising permissions granted by this License.

\\"Source\\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.

\\"Object\\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.

\\"Work\\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).

\\"Derivative Works\\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.

\\"Contribution\\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \\"submitted\\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \\"Not a Contribution.\\"

\\"Contributor\\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.

2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.

3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.

4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:

     (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and

     (b) You must cause any modified files to carry prominent notices stating that You changed the files; and

     (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and

     (d) If the Work includes a \\"NOTICE\\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.

     You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.

5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.

6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.

7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.

8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.

9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS

APPENDIX: How to apply the Apache License to your work.

To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \\"[]\\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \\"printed page\\" as the copyright notice for easier identification within third-party archives.

Copyright [yyyy] [name of copyright owner]

Licensed under the Apache License, Version 2.0 (the \\"License\\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \\"AS IS\\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.",
}
`;

exports[`java + different entrypoint 1`] = `
Object {
  "src/main/java/hello/world/$Module.java": "package hello.world;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.Reader;
import java.io.UncheckedIOException;

import java.nio.charset.StandardCharsets;

import java.util.HashMap;
import java.util.Map;

import software.amazon.jsii.JsiiModule;

@software.amazon.jsii.Internal
public final class $Module extends JsiiModule {
    private static final Map<String, String> MODULE_TYPES = load();

    private static Map<String, String> load() {
        final Map<String, String> result = new HashMap<>();
        final ClassLoader cl = $Module.class.getClassLoader();
        try (final InputStream is = cl.getResourceAsStream(\\"hello/world/$Module.txt\\");
             final Reader rd = new InputStreamReader(is, StandardCharsets.UTF_8);
             final BufferedReader br = new BufferedReader(rd)) {
            br.lines()
              .filter(line -> !line.trim().isEmpty())
              .forEach(line ->  {
                final String[] parts = line.split(\\"=\\", 2);
                final String fqn = parts[0];
                final String className = parts[1];
                result.put(fqn, className);
            });
        }
        catch (final IOException exception) {
            throw new UncheckedIOException(exception);
        }
        return result;
    }

    private final Map<String, Class<?>> cache = new HashMap<>();

    public $Module() {
        super(\\"javapackage\\", \\"0.0.0\\", $Module.class, \\"javapackage@0.0.0.jsii.tgz\\");
    }

    @Override
    protected Class<?> resolveClass(final String fqn) throws ClassNotFoundException {
        if (!MODULE_TYPES.containsKey(fqn)) {
            throw new ClassNotFoundException(\\"Unknown JSII type: \\" + fqn);
        }
        String className = MODULE_TYPES.get(fqn);
        if (!this.cache.containsKey(className)) {
            this.cache.put(className, this.findClass(className));
        }
        return this.cache.get(className);
    }

    private Class<?> findClass(final String binaryName) {
        try {
            return Class.forName(binaryName);
        }
        catch (final ClassNotFoundException exception) {
            throw new RuntimeException(exception);
        }
    }
}
",
  "src/main/java/hello/world/Hello.java": "package hello.world;


@software.amazon.jsii.Jsii(module = hello.world.$Module.class, fqn = \\"javapackage.Hello\\")
public class Hello extends software.amazon.jsii.JsiiObject {

    protected Hello(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Hello(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    public Hello() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    public @org.jetbrains.annotations.NotNull java.lang.Number add(final @org.jetbrains.annotations.NotNull hello.world.Operands ops) {
        return software.amazon.jsii.Kernel.call(this, \\"add\\", software.amazon.jsii.NativeType.forClass(java.lang.Number.class), new Object[] { java.util.Objects.requireNonNull(ops, \\"ops is required\\") });
    }
}
",
  "src/main/java/hello/world/Operands.java": "package hello.world;


@software.amazon.jsii.Jsii(module = hello.world.$Module.class, fqn = \\"javapackage.Operands\\")
@software.amazon.jsii.Jsii.Proxy(Operands.Jsii$Proxy.class)
public interface Operands extends software.amazon.jsii.JsiiSerializable {

    @org.jetbrains.annotations.NotNull java.lang.Number getLhs();

    @org.jetbrains.annotations.NotNull java.lang.Number getRhs();

    /**
     * @return a {@link Builder} of {@link Operands}
     */
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link Operands}
     */
    public static final class Builder implements software.amazon.jsii.Builder<Operands> {
        private java.lang.Number lhs;
        private java.lang.Number rhs;

        /**
         * Sets the value of {@link Operands#getLhs}
         * @param lhs the value to be set. This parameter is required.
         * @return {@code this}
         */
        public Builder lhs(java.lang.Number lhs) {
            this.lhs = lhs;
            return this;
        }

        /**
         * Sets the value of {@link Operands#getRhs}
         * @param rhs the value to be set. This parameter is required.
         * @return {@code this}
         */
        public Builder rhs(java.lang.Number rhs) {
            this.rhs = rhs;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link Operands}
         * @throws NullPointerException if any required attribute was not provided
         */
        @Override
        public Operands build() {
            return new Jsii$Proxy(lhs, rhs);
        }
    }

    /**
     * An implementation for {@link Operands}
     */
    @software.amazon.jsii.Internal
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements Operands {
        private final java.lang.Number lhs;
        private final java.lang.Number rhs;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.lhs = software.amazon.jsii.Kernel.get(this, \\"lhs\\", software.amazon.jsii.NativeType.forClass(java.lang.Number.class));
            this.rhs = software.amazon.jsii.Kernel.get(this, \\"rhs\\", software.amazon.jsii.NativeType.forClass(java.lang.Number.class));
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        protected Jsii$Proxy(final java.lang.Number lhs, final java.lang.Number rhs) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.lhs = java.util.Objects.requireNonNull(lhs, \\"lhs is required\\");
            this.rhs = java.util.Objects.requireNonNull(rhs, \\"rhs is required\\");
        }

        @Override
        public final java.lang.Number getLhs() {
            return this.lhs;
        }

        @Override
        public final java.lang.Number getRhs() {
            return this.rhs;
        }

        @Override
        @software.amazon.jsii.Internal
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set(\\"lhs\\", om.valueToTree(this.getLhs()));
            data.set(\\"rhs\\", om.valueToTree(this.getRhs()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set(\\"fqn\\", om.valueToTree(\\"javapackage.Operands\\"));
            struct.set(\\"data\\", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set(\\"$jsii.struct\\", struct);

            return obj;
        }

        @Override
        public final boolean equals(final Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Operands.Jsii$Proxy that = (Operands.Jsii$Proxy) o;

            if (!lhs.equals(that.lhs)) return false;
            return this.rhs.equals(that.rhs);
        }

        @Override
        public final int hashCode() {
            int result = this.lhs.hashCode();
            result = 31 * result + (this.rhs.hashCode());
            return result;
        }
    }
}
",
  "src/main/resources/hello/world/$Module.txt": "javapackage.Hello=hello.world.Hello
javapackage.Operands=hello.world.Operands
",
}
`;

exports[`outputJsii can be used to look at the jsii file 1`] = `
Object {
  "author": Object {
    "name": "generated@generated.com",
    "roles": Array [
      "author",
    ],
  },
  "description": "1bc04b5291c26a46d918139138b992d2de976d6851d0893b0476b85bfbdfc6e6",
  "fingerprint": "n/T1bf8rrZI8cn9Uowf0wdecJvm7w0nzgLA3Z37mfmo=",
  "homepage": "http://generated",
  "jsiiVersion": "1.28.0 (build 1801f4f)",
  "license": "Apache-2.0",
  "metadata": Object {
    "jsii": Object {
      "pacmak": Object {
        "hasDefaultInterfaces": true,
      },
    },
  },
  "name": "1bc04b5291c26a46d918139138b992d2de976d6851d0893b0476b85bfbdfc6e6",
  "repository": Object {
    "type": "git",
    "url": "http://generated",
  },
  "schema": "jsii/0.10.0",
  "targets": Object {
    "js": Object {
      "npm": "1bc04b5291c26a46d918139138b992d2de976d6851d0893b0476b85bfbdfc6e6",
    },
  },
  "types": Object {
    "1bc04b5291c26a46d918139138b992d2de976d6851d0893b0476b85bfbdfc6e6.Foo": Object {
      "assembly": "1bc04b5291c26a46d918139138b992d2de976d6851d0893b0476b85bfbdfc6e6",
      "fqn": "1bc04b5291c26a46d918139138b992d2de976d6851d0893b0476b85bfbdfc6e6.Foo",
      "initializer": Object {},
      "kind": "class",
      "locationInModule": Object {
        "filename": "index.ts",
        "line": 2,
      },
      "methods": Array [
        Object {
          "locationInModule": Object {
            "filename": "index.ts",
            "line": 3,
          },
          "name": "hello",
          "returns": Object {
            "type": Object {
              "primitive": "string",
            },
          },
          "static": true,
        },
      ],
      "name": "Foo",
    },
  },
  "version": "0.0.0",
}
`;

exports[`python + different entrypoint + submodule 1`] = `
Object {
  "my_python_module/submodule/__init__.py": "import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ._jsii import *


class Hello(metaclass=jsii.JSIIMeta, jsii_type=\\"pythonpackage.Hello\\"):
    def __init__(self) -> None:
        jsii.create(Hello, self, [])

    @jsii.member(jsii_name=\\"add\\")
    def add(self, *, lhs: jsii.Number, rhs: jsii.Number) -> jsii.Number:
        '''
        :param lhs: -
        :param rhs: -
        '''
        ops = Operands(lhs=lhs, rhs=rhs)

        return typing.cast(jsii.Number, jsii.invoke(self, \\"add\\", [ops]))


@jsii.data_type(
    jsii_type=\\"pythonpackage.Operands\\",
    jsii_struct_bases=[],
    name_mapping={\\"lhs\\": \\"lhs\\", \\"rhs\\": \\"rhs\\"},
)
class Operands:
    def __init__(self, *, lhs: jsii.Number, rhs: jsii.Number) -> None:
        '''
        :param lhs: -
        :param rhs: -
        '''
        self._values: typing.Dict[str, typing.Any] = {
            \\"lhs\\": lhs,
            \\"rhs\\": rhs,
        }

    @builtins.property
    def lhs(self) -> jsii.Number:
        result = self._values.get(\\"lhs\\")
        assert result is not None, \\"Required property 'lhs' is missing\\"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def rhs(self) -> jsii.Number:
        result = self._values.get(\\"rhs\\")
        assert result is not None, \\"Required property 'rhs' is missing\\"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return \\"Operands(%s)\\" % \\", \\".join(
            k + \\"=\\" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    \\"Hello\\",
    \\"Operands\\",
]

publication.publish()
",
  "my_python_module/submodule/_jsii/__init__.py": "import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

__jsii_assembly__ = jsii.JSIIAssembly.load(
    \\"pythonpackage\\", \\"0.0.0\\", __name__[0:-6], \\"pythonpackage@0.0.0.jsii.tgz\\"
)

__all__ = [
    \\"__jsii_assembly__\\",
]

publication.publish()
",
  "my_python_module/submodule/py.typed": "
",
}
`;
